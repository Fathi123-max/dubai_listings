#!/usr/bin/env node
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
// Import createRequire if needed for JSON imports
// import { createRequire } from 'module';
import readline from 'readline';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
// Create require function for JSON imports if needed
// const require = createRequire(import.meta.url);

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout,
});

const prompt = question => new Promise(resolve => rl.question(question, resolve));

function logInfo(message) {
  // eslint-disable-next-line no-console
  console.log(message);
}

function logError(message) {
  // eslint-disable-next-line no-console
  console.error(`❌ Error: ${message}`);
}

async function setupEnv() {
  try {
    const envExamplePath = path.join(__dirname, '..', '.env.example');
    const envPath = path.join(__dirname, '..', '.env');

    // Check if .env already exists
    if (fs.existsSync(envPath)) {
      const overwrite = await prompt(
        '.env file already exists. Do you want to overwrite it? (y/N) '
      );
      if (overwrite.toLowerCase() !== 'y') {
        logInfo('Setup cancelled.');
        rl.close();
        return;
      }
    }

    // Read .env.example
    const envExample = fs.readFileSync(envExamplePath, 'utf8');
    const envVars = {};

    // Parse variables from .env.example
    envExample.split('\n').forEach(line => {
      const match = line.match(/^([A-Z0-9_]+)=/);
      if (match) {
        const key = match[1];
        const currentValue = process.env[key] || '';
        envVars[key] = currentValue;
      }
    });

    // Generate .env content
    let envContent = '# Auto-generated by setup script\n';
    envContent += `# Generated at: ${new Date().toISOString()}\n\n`;

    Object.entries(envVars).forEach(([key, value]) => {
      envContent += `${key}=${value || ''}\n`;
    });

    // Write .env file
    fs.writeFileSync(envPath, envContent);
    logInfo('\n✅ .env file created successfully!');
    logInfo('🎉 Setup completed! You can now start the application.');
    logInfo('   Run: npm run dev\n');
  } catch (error) {
    logError(error.message);
  } finally {
    rl.close();
  }
}

setupEnv();
